drop trigger if exists "trigger_set_updated_at" on "public"."records";

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "record_id" bigint not null,
    "author_name" text not null,
    "content" text not null,
    "password_hash" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."comments" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."comments" add constraint "comments_record_id_fkey" FOREIGN KEY (record_id) REFERENCES records(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_record_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_comment(p_record_id bigint, p_author_name text, p_content text, p_password text)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$DECLARE
  v_hash text;
  v_id bigint;
BEGIN
  v_hash := crypt(p_password, gen_salt('bf'));

  INSERT INTO comments(record_id, author_name, content, password_hash) VALUES (p_record_id, p_author_name, p_content, v_hash) RETURNING id INTO v_id;

  RETURN v_id;
END;$function$
;

CREATE OR REPLACE FUNCTION public.delete_comment(p_comment_id bigint, p_password text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$DECLARE
  v_hash text;
BEGIN
  SELECT password_hash INTO v_hash FROM comments WHERE id = p_comment_id;

  IF v_hash IS NULL OR v_hash <> crypt(p_password, v_hash) THEN
    RETURN false;
  END IF;

  DELETE FROM comments WHERE id = p_comment_id;

  RETURN true;
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_comment(p_comment_id bigint, p_password text, p_content text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$DECLARE
  v_hash text;
BEGIN
  SELECT password_hash INTO v_hash FROM comments WHERE id = p_comment_id;

  IF v_hash IS NULL OR v_hash <> crypt(p_password, v_hash) THEN
    RETURN false;
  END IF;

  UPDATE comments SET content = p_content WHERE id = p_comment_id;

  RETURN true;
END;$function$
;

CREATE OR REPLACE FUNCTION public.verify_comment(p_comment_id bigint, p_password text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$DECLARE
  v_hash text;
BEGIN
  SELECT password_hash INTO v_hash FROM comments WHERE id = p_comment_id;

  IF v_hash IS NULL OR v_hash <> crypt(p_password, v_hash) THEN
    RETURN false;
  END IF;

  RETURN true;
END;$function$
;

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

create policy "Allow insert for everyone"
on "public"."comments"
as permissive
for insert
to public
with check (true);


create policy "Allow select for everyone"
on "public"."comments"
as permissive
for select
to public
using (true);


CREATE TRIGGER comment_trigger_set_updated_at BEFORE UPDATE ON public.comments FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER record_trigger_set_updated_at BEFORE UPDATE ON public.records FOR EACH ROW EXECUTE FUNCTION set_updated_at();


