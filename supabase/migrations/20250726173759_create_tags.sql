create table "public"."record_tags" (
    "record_id" bigint not null,
    "tag_id" bigint not null
);


alter table "public"."record_tags" enable row level security;

create table "public"."tags" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "slug" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."tags" enable row level security;

alter table "public"."records" drop column "tags";

alter table "public"."records" alter column "author_id" set not null;

alter table "public"."records" alter column "content" set not null;

alter table "public"."records" alter column "updated_at" set not null;

CREATE UNIQUE INDEX record_tags_pkey ON public.record_tags USING btree (record_id, tag_id);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

CREATE UNIQUE INDEX tags_slug_key ON public.tags USING btree (slug);

alter table "public"."record_tags" add constraint "record_tags_pkey" PRIMARY KEY using index "record_tags_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."record_tags" add constraint "record_tags_record_id_fkey" FOREIGN KEY (record_id) REFERENCES records(id) ON DELETE CASCADE not valid;

alter table "public"."record_tags" validate constraint "record_tags_record_id_fkey";

alter table "public"."record_tags" add constraint "record_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid;

alter table "public"."record_tags" validate constraint "record_tags_tag_id_fkey";

alter table "public"."tags" add constraint "tags_slug_key" UNIQUE using index "tags_slug_key";

grant delete on table "public"."record_tags" to "anon";

grant insert on table "public"."record_tags" to "anon";

grant references on table "public"."record_tags" to "anon";

grant select on table "public"."record_tags" to "anon";

grant trigger on table "public"."record_tags" to "anon";

grant truncate on table "public"."record_tags" to "anon";

grant update on table "public"."record_tags" to "anon";

grant delete on table "public"."record_tags" to "authenticated";

grant insert on table "public"."record_tags" to "authenticated";

grant references on table "public"."record_tags" to "authenticated";

grant select on table "public"."record_tags" to "authenticated";

grant trigger on table "public"."record_tags" to "authenticated";

grant truncate on table "public"."record_tags" to "authenticated";

grant update on table "public"."record_tags" to "authenticated";

grant delete on table "public"."record_tags" to "service_role";

grant insert on table "public"."record_tags" to "service_role";

grant references on table "public"."record_tags" to "service_role";

grant select on table "public"."record_tags" to "service_role";

grant trigger on table "public"."record_tags" to "service_role";

grant truncate on table "public"."record_tags" to "service_role";

grant update on table "public"."record_tags" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

create policy "Allow insert for own record only"
on "public"."record_tags"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM records
  WHERE ((records.id = record_tags.record_id) AND (records.author_id = auth.uid())))));


create policy "Allow select for everyone"
on "public"."record_tags"
as permissive
for select
to public
using (true);


create policy "Allow insert for authenticated users only"
on "public"."tags"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow select for everyone"
on "public"."tags"
as permissive
for select
to public
using (true);



